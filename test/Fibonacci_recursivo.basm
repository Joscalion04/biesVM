$FUN $1 args:1 parent:$0
    ; Caso base: Si n <= 0, retornar 0
    LDV 0           ; Cargamos 0 
    BLD 0 0         ; Cargamos n desde el binding 0, posición 0
    LTE             ; n <= 0
    BT 28            ; Si n <= 0, saltar al retorno de 0

    ; Caso base: Si n == 1, retornar 1
    BLD 0 0         ; Cargamos n desde el binding 0, posición 0
    LDV 1           ; Cargamos 1
    EQ              ; n == 1
    BT 27            ; Si n == 1, saltar al retorno de 1

    BLD 0 3        ; Cargar el contador
    BLD 0 0        ; Cargar n
    LT             ; Comparar contador con n
    BT 25          ; Si contador > n, saltar a fin del bucle

 
    ; Caso recursivo: calcular fibonacci(n-1) y fibonacci(n-2)
    BLD 0 1        ; Cargar a
    BLD 0 2        ; Cargar b
    ADD            ; Calcular a + b
    BST 0 4        ; Guardar el resultado en temp (binding 0, posición 4)

    BLD 0 2        ; Cargar b
    BST 0 1        ; Actualizar a con el valor de b

    BLD 0 4        ; Cargar temp
    BST 0 2        ; Actualizar b con el valor de temp

 ; Incrementar el contador
    BLD 0 3        ; Cargar el contador
    LDV 1          ; Cargar 1
    ADD            ; Incrementar el contador
    BST 0 3        ; Guardar el nuevo contador

    BLD 0 4
    BLD 0 3
    BLD 0 2
    BLD 0 1
    BLD 0 0

    LDF $1
    APP 5
    LDF 0
    BST 0 4
    BR 3
    LDV 1      ; Si n == 1, retornamos 1
    BST 0 4
    BLD 0 4
    RET             ; Retornamos el resultado
    
    
$END

$FUN $0 args:0 parent:$0
     LDV 2
     LDV 1
    LDV 0
     LDV 10         ; Cargar el valor de 'n'
    LDF $1          ; Cargar la función 'fibonacci'
    APP 4           ; Llamar a la función 'fibonacci' con 1 argumento
    PRN             ; Imprimir el valor retornado
    HLT             ; Detener la ejecución
$END

INI $0              ; Iniciar el programa desde main



    
