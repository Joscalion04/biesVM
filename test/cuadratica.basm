$FUN $1 args:100 parent:$0     ;squareRoot(a, max=20, epsilon=1e-15)
    LDV 20              ; Cargamos max=20
    BST 0 1             ; Guardamos max en bindings
    LDV "1e-15"
    CST "number"
    BST 0 2             ; Guardamos epsilon
    BLD 0 0             ; Traemos a
    LDV 0
    EQ                  ; a == 0
    BT 52               ; Se va a return
    BLD 0 0             ; Traemos a
    LDV 1
    EQ                  ; a == 1
    BT 48               ; Se va a return
    LDV 2
    BLD 0 0             ; Traemos a
    DIV                 ; a / 2
    BST 0 3             ; guardamos root = a / 2

    ; Aqui se inicializa el for

    LDV 0
    BST 0 4             ; Guardamos i = 0
    LDV 2
    BLD 0 0             ; Traemos a
    DIV                 ; a / 2
    BST 0 5             ; Guardamos x = a / 2

    ; Condiciones del for

    BLD 0 1             ; Traemos max
    BLD 0 4             ; Traemos i
    LT                  ; i < max

    BLD 0 0             ; Traemos a
    BLD 0 5             ; Traemos x
    BLD 0 5             ; Traemos x
    MUL                 ; x * x
    SUB                 ; x * x - a
    SGN
    BT 7                ; Si es positivo, continue
    BLD 0 0             ; Traemos a
    BLD 0 5             ; Traemos x
    BLD 0 5             ; Traemos x
    MUL                 ; x * x
    SUB                 ; x * x - a
    NEG                 ; Si es negativo, conviertalo a positivo
    BLD 0 2             ; Traemos epsilon
    SWP                 ; Ponemos abs(x * x - a) arriba
    GTE                 ; abs(x * x - a) >= epsilon
    EQ                  ; i < max == abs(x * x - a) >= epsilon  Pregunta si se cumplen ambas condiciones
    BF 18                ; Si no se cumplen ambas condiciones, salga del for

    ; updates del for

    BLD 0 5             ; Traemos x
    BLD 0 0             ; Traemos a
    DIV                 ; (a / x)
    BLD 0 5             ; Traemos x
    ADD                 ; (x - (a / x))
    LDV "0.5"
    CST "number"
    MUL                 ; 0.5 * (x - (a / x))
    BST 0 5             ; Actualizamos x = 0.5 * (x - (a / x))

    BLD 0 5             ; traemos x
    BST 0 3             ; Actualizamos root = x

    BLD 0 4             ; Traemos i
    LDV 1
    ADD
    BST 0 4             ; Actualizamos i + 1
    BF -35

    BLD 0 0             ; Traemos a en caso de que a == 0 || a == 1
    BR 2                ; Saltamos a return
    BLD 0 3             ; Traemos root
    RET
$END


$FUN $0 args:0 parent:$0
    ; Cargar los coeficientes a, b, y c (valores de la ecuación cuadrática ax^2 + bx + c = 0)
    LDV 1               ; Cargar a = 1
    BST 0 0             ; Guardar a
    LDV -3              ; Cargar b = -3
    BST 0 1             ; Guardar b
    LDV 2               ; Cargar c = 2
    BST 0 2             ; Guardar c

    ; Resolver el discriminante: b^2 - 4ac
    BLD 0 1             ; Cargar b
    BLD 0 1             ; Cargar b
    MUL                 ; Calcular b^2
    BLD 0 0             ; Cargar a
    LDV 4               ; Cargar el número 4 (para multiplicar por 4ac)
    MUL                 ; Multiplicar 4 * a
    BLD 0 2             ; Cargar c
    SWP
    MUL                 ; Multiplicar 4a * c
    SWP 
    SUB                 ; Restar b^2 - 4ac
    BST 0 3             ; Guardamos el discriminante en los bindings

    ; Verificar si el discriminante es mayor o igual a 0
    BLD 0 3             ; Traemos el discriminante
    SGN                 ; Determinar el signo del discriminante
    BF 25               ; Si el discriminante es negativo (0), salta al final (no hay soluciones reales)

    ; Calcular la primera raíz (-b + sqrt(discriminante)) / 2a
    BLD 0 3             ; Traemos el discriminante
    LDF $1
    APP 1             ; Calculamos la raiz cuadrada del discriminante
    BLD 0 1             ; Cargar b
    NEG                 ; Se hace -b
    ADD                 ; Calculamos (-b + sqrt(discriminante))
    LDV 2               ; Cargar el número 2
    BLD 0 0             ; Traemos a
    MUL                 ; Multiplicar 2 * a
    SWP                 ; Ponemos (-b + sqrt(discriminante)) arriba
    DIV                 ; Dividir (-b + sqrt(discriminante)) / 2a
    PRN                 ; Imprimir la primera raíz

    ; Calcular la segunda raíz (-b - sqrt(discriminante)) / 2a
    BLD 0 3             ; Traemos el discriminante
    LDF $1
    APP 1             ; Calculamos la raiz cuadrada del discriminante
    BLD 0 1             ; Cargar b
    NEG                 ; Se hace -b
    SUB                 ; Calculamos (-b - sqrt(discriminante))
    LDV 2               ; Cargar el número 2
    BLD 0 0             ; Traemos a
    MUL                 ; Multiplicar 2 * a
    SWP                 ; Ponemos (-b - sqrt(discriminante)) arriba
    DIV                 ; Dividir (-b - sqrt(discriminante)) / 2a
    PRN                 ; Imprimir la primera raíz
    HLT
$END
INI $0